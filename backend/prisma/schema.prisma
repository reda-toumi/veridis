generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Load DB URL from .env file
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  bio       String?
  avatar    Bytes?   // Store image as binary data (BYTEA)
  createdAt DateTime @default(now())

  posts    Post[]
  comments Comment[]
  likes    Like[]

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  followers Follow[] @relation("UserFollowers")
  following Follow[] @relation("UserFollowing")
}

model Post {
  id        String   @id @default(uuid())
  content   String   @db.Text // Allows longer content
  imageUrl  String?  // Optional image URL
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  comments Comment[]
  likes    Like[]

  @@index([createdAt]) // Improves querying by date
}


model Comment {
  id        String   @id @default(uuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  likes Like[]
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
}

model Message {
  id String @id @default(uuid())

  sender   User   @relation("SentMessages", fields: [senderId], references: [id])
  senderId String

  receiver   User   @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String

  content   String
  createdAt DateTime @default(now())
}

model Follow {
  id          String @id @default(uuid())
  follower    User   @relation("UserFollowers", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("UserFollowing", fields: [followingId], references: [id])
  followingId String
}
